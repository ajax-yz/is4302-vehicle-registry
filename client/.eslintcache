[{"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/index.js":"1","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/serviceWorker.js":"2","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/context/UserContext.js":"3","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/context/LayoutContext.js":"4","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/App.js":"5","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/LoadingContainer.js":"6","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/themes/index.js":"7","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/error/Error.js":"8","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Layout/Layout.js":"9","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/login/Login.js":"10","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/themes/default.js":"11","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/login/styles.js":"12","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/error/styles.js":"13","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Layout/styles.js":"14","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/charts/Charts.js":"15","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/tables/Tables.js":"16","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/notifications/Notifications.js":"17","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/typography/Typography.js":"18","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Header/Header.js":"19","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/dashboard/Dashboard.js":"20","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Sidebar/Sidebar.js":"21","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/icons/Icons.js":"22","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/dashboard/mock.js":"23","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/dashboard/styles.js":"24","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Header/styles.js":"25","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Sidebar/components/Dot.js":"26","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Sidebar/styles.js":"27","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/dashboard/components/BigStat/BigStat.js":"28","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/dashboard/components/Table/Table.js":"29","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Sidebar/components/SidebarLink/SidebarLink.js":"30","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/icons/styles.js":"31","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/UserAvatar/UserAvatar.js":"32","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/PageTitle/PageTitle.js":"33","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Notification/Notification.js":"34","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Wrappers/Wrappers.js":"35","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Widget/Widget.js":"36","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Sidebar/components/SidebarLink/styles.js":"37","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/dashboard/components/BigStat/styles.js":"38","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/PageTitle/styles.js":"39","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/UserAvatar/styles.js":"40","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Notification/styles.js":"41","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Widget/styles.js":"42","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/notifications/styles.js":"43","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/typography/styles.js":"44","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/charts/components/ApexHeatmap.js":"45","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/charts/components/ApexLineChart.js":"46","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/drizzleOptions.js":"47","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/constants.js":"48","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/admin/index.js":"49","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/owner/index.js":"50","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/misc/index.js":"51","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/ViewCard/table.js":"52","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Modal/form.js":"53","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/services/VehicleRegistry.js":"54","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/ViewCard/index.js":"55","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/workshopInfo/index.js":"56","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/wSetSR/index.js":"57"},{"size":1352,"mtime":1617972856377,"results":"58","hashOfConfig":"59"},{"size":4948,"mtime":1617722007872,"results":"60","hashOfConfig":"59"},{"size":1977,"mtime":1617722007851,"results":"61","hashOfConfig":"59"},{"size":1392,"mtime":1617722007851,"results":"62","hashOfConfig":"59"},{"size":3152,"mtime":1617972856376,"results":"63","hashOfConfig":"59"},{"size":432,"mtime":1617972856376,"results":"64","hashOfConfig":"59"},{"size":502,"mtime":1617722007872,"results":"65","hashOfConfig":"59"},{"size":1571,"mtime":1617722007870,"results":"66","hashOfConfig":"59"},{"size":5802,"mtime":1618131633511,"results":"67","hashOfConfig":"59"},{"size":1177,"mtime":1617972856377,"results":"68","hashOfConfig":"59"},{"size":2987,"mtime":1617722007872,"results":"69","hashOfConfig":"59"},{"size":3420,"mtime":1617972856377,"results":"70","hashOfConfig":"59"},{"size":1334,"mtime":1617722007870,"results":"71","hashOfConfig":"59"},{"size":680,"mtime":1617722007849,"results":"72","hashOfConfig":"59"},{"size":5556,"mtime":1617722007869,"results":"73","hashOfConfig":"59"},{"size":2080,"mtime":1617722007871,"results":"74","hashOfConfig":"59"},{"size":13470,"mtime":1617722007871,"results":"75","hashOfConfig":"59"},{"size":4506,"mtime":1617722007871,"results":"76","hashOfConfig":"59"},{"size":10122,"mtime":1617722007849,"results":"77","hashOfConfig":"59"},{"size":16960,"mtime":1618062287332,"results":"78","hashOfConfig":"59"},{"size":4147,"mtime":1618131880957,"results":"79","hashOfConfig":"59"},{"size":377833,"mtime":1617722007871,"results":"80","hashOfConfig":"59"},{"size":4105,"mtime":1617722007870,"results":"81","hashOfConfig":"59"},{"size":2870,"mtime":1617722007870,"results":"82","hashOfConfig":"59"},{"size":3868,"mtime":1617722007849,"results":"83","hashOfConfig":"59"},{"size":862,"mtime":1617722007850,"results":"84","hashOfConfig":"59"},{"size":1304,"mtime":1617722007850,"results":"85","hashOfConfig":"59"},{"size":4039,"mtime":1617722007870,"results":"86","hashOfConfig":"59"},{"size":1274,"mtime":1617722007870,"results":"87","hashOfConfig":"59"},{"size":3459,"mtime":1617722007850,"results":"88","hashOfConfig":"59"},{"size":780,"mtime":1617722007871,"results":"89","hashOfConfig":"59"},{"size":593,"mtime":1617722007850,"results":"90","hashOfConfig":"59"},{"size":427,"mtime":1617722007850,"results":"91","hashOfConfig":"59"},{"size":3296,"mtime":1617722007849,"results":"92","hashOfConfig":"59"},{"size":3790,"mtime":1617722007851,"results":"93","hashOfConfig":"59"},{"size":2485,"mtime":1617722007850,"results":"94","hashOfConfig":"59"},{"size":1285,"mtime":1617722007850,"results":"95","hashOfConfig":"59"},{"size":1027,"mtime":1617722007870,"results":"96","hashOfConfig":"59"},{"size":462,"mtime":1617722007850,"results":"97","hashOfConfig":"59"},{"size":276,"mtime":1617722007850,"results":"98","hashOfConfig":"59"},{"size":993,"mtime":1617722007849,"results":"99","hashOfConfig":"59"},{"size":969,"mtime":1617722007851,"results":"100","hashOfConfig":"59"},{"size":1858,"mtime":1617722007871,"results":"101","hashOfConfig":"59"},{"size":374,"mtime":1617722007871,"results":"102","hashOfConfig":"59"},{"size":1794,"mtime":1617722007869,"results":"103","hashOfConfig":"59"},{"size":1328,"mtime":1617722007869,"results":"104","hashOfConfig":"59"},{"size":304,"mtime":1617972856377,"results":"105","hashOfConfig":"59"},{"size":1082,"mtime":1617972856376,"results":"106","hashOfConfig":"59"},{"size":483,"mtime":1617972856377,"results":"107","hashOfConfig":"59"},{"size":2848,"mtime":1618130408001,"results":"108","hashOfConfig":"59"},{"size":5675,"mtime":1618140398911,"results":"109","hashOfConfig":"59"},{"size":1875,"mtime":1617972856376,"results":"110","hashOfConfig":"59"},{"size":3370,"mtime":1618129396178,"results":"111","hashOfConfig":"59"},{"size":15624,"mtime":1618140322921,"results":"112","hashOfConfig":"59"},{"size":1608,"mtime":1617972856376,"results":"113","hashOfConfig":"59"},{"size":3430,"mtime":1618131094061,"results":"114","hashOfConfig":"59"},{"size":5600,"mtime":1618138637601,"results":"115","hashOfConfig":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"1j5o8l5",{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"118"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"118"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"118"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"118"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"118"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243"},"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/index.js",[],["244","245"],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/serviceWorker.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/context/UserContext.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/context/LayoutContext.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/App.js",["246","247","248","249"],"import React, { useEffect, useState } from \"react\";\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\n\n// components\nimport Layout from \"./Layout\";\n\n// pages\nimport Error from \"../pages/error\";\nimport Login from \"../pages/login\";\n\n// Drizzle\nimport { drizzleReactHooks } from \"@drizzle/react-plugin\";\n\n// constants\nimport { allRoles } from \"../constants\";\n\nconst { useDrizzle, useDrizzleState } = drizzleReactHooks;\n\nconst App = () => {\n  // global\n  const [userRole, setUserRole] = useState(null);\n  const drizzleState = useDrizzleState((state) => state);\n  const account = drizzleState.accounts[0];\n  console.log(\"drizzlestate.accounts =\", drizzleState.accounts);\n  const accountsLength = Object.keys(drizzleState.accounts).length;\n  const { drizzle } = useDrizzle();\n\n  const getRole = async () => {\n    console.log(\"drizzle =\", drizzle);\n    console.log(\"drizzleState =\", drizzleState);\n\n    const roleBytes = await drizzle.contracts.VehicleRegistry.methods\n      .roleOfAddress(account)\n      .call();\n    if (roleBytes) {\n      const role = drizzle.web3.utils.toUtf8(roleBytes);\n      setUserRole(role);\n      console.log(\"accountt =\", account);\n      console.log(\"role =\", role);\n    }\n  };\n\n  useEffect(() => {\n    if (drizzleState.drizzleStatus.initialized && accountsLength == 1) {\n      getRole();\n    }\n  }, [drizzleState.drizzleStatus.initialized]);\n\n  // length == 1 means user is logged in on meta mask (Includes correct and incorrect accounts). Length > 1 means user not logged in.\n  const isLoggedInOnMetaMask = Object.keys(drizzleState.accounts).length === 1;\n  if (userRole == null) {\n    return <div> Loading...</div>;\n  }\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path=\"/\" render={() => <Redirect to=\"/app/dashboard\" />} />\n        <Route\n          exact\n          path=\"/app\"\n          render={() => <Redirect to=\"/app/dashboard\" />}\n        />\n        <PrivateRoute path=\"/app\" component={Layout} role={userRole} />\n        <PublicRoute\n          path=\"/login\"\n          component={Login}\n          role={userRole}\n          isLoggedIn={isLoggedInOnMetaMask}\n        />\n        <Route component={Error} />\n      </Switch>\n    </HashRouter>\n  );\n};\n\nconst PrivateRoute = ({ component, role, ...rest }) => {\n  const isAuthenticated = allRoles.indexOf(role) != -1;\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        isAuthenticated ? (\n          React.createElement(component, { ...props, role })\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/login\",\n              state: {\n                from: props.location,\n              },\n            }}\n          />\n        )\n      }\n    />\n  );\n};\n\nconst PublicRoute = ({ component, role, isLoggedIn, ...rest }) => {\n  const isAuthenticated = allRoles.indexOf(role) != -1;\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        isAuthenticated ? (\n          <Redirect\n            to={{\n              pathname: \"/\",\n            }}\n          />\n        ) : (\n          React.createElement(component, { ...props, isLoggedIn })\n        )\n      }\n    />\n  );\n};\n\nexport default App;\n","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/LoadingContainer.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/themes/index.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/error/Error.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Layout/Layout.js",["250","251"],"import React from \"react\";\nimport { Route, Switch, Redirect, withRouter } from \"react-router-dom\";\nimport classnames from \"classnames\";\nimport { Box, IconButton, Link } from \"@material-ui/core\";\nimport Icon from \"@mdi/react\";\n\n//icons\nimport {\n  mdiFacebook as FacebookIcon,\n  mdiTwitter as TwitterIcon,\n  mdiGithub as GithubIcon,\n} from \"@mdi/js\";\n\n// styles\nimport useStyles from \"./styles\";\n\n// components\nimport Header from \"../Header\";\nimport Sidebar from \"../Sidebar\";\n\n// pages\nimport Dashboard from \"../../pages/dashboard\";\nimport Typography from \"../../pages/typography\";\nimport Notifications from \"../../pages/notifications\";\nimport Tables from \"../../pages/tables\";\nimport Icons from \"../../pages/icons\";\nimport Charts from \"../../pages/charts\";\nimport AdminPage from \"../../pages/admin\";\nimport OwnerPage from \"../../pages/owner\";\nimport WorkshopPage from \"../../pages/workshopInfo\";\nimport WorkshopSetSR from \"../../pages/wSetSR\";\n// context\nimport { useLayoutState } from \"../../context/LayoutContext\";\n\n// constants\nimport { ROLES_ENUM } from \"../../constants\";\nimport MiscPage from \"../../pages/misc\";\n\nfunction Layout(props) {\n  var classes = useStyles();\n\n  // global\n  var layoutState = useLayoutState();\n  const role = props.role;\n  return (\n    <div className={classes.root}>\n      <>\n        <Header history={props.history} />\n        <Sidebar role={role} />\n        <div\n          className={classnames(classes.content, {\n            [classes.contentShift]: layoutState.isSidebarOpened,\n          })}\n        >\n          <div className={classes.fakeToolbar} />\n          <Switch>\n            <PrivateRoute\n              path=\"/app/dashboard\"\n              component={Dashboard}\n              userRole={role}\n              allowedRole={ROLES_ENUM.ADMINISTRATOR}\n            />\n            <PrivateRoute\n              path=\"/app/administrator\"\n              component={AdminPage}\n              userRole={role}\n              allowedRole={ROLES_ENUM.ADMINISTRATOR}\n            />\n            <PrivateRoute\n              path=\"/app/owner\"\n              component={OwnerPage}\n              userRole={role}\n              allowedRole={ROLES_ENUM.OWNER}\n            />\n            <PrivateRoute\n              path=\"/app/dealer\"\n              component={Notifications}\n              userRole={role}\n              allowedRole={ROLES_ENUM.DEALER}\n            />\n            <PrivateRoute\n              path=\"/app/workshop\"\n              component={WorkshopPage}\n              userRole={role}\n              allowedRole={ROLES_ENUM.WORKSHOP}\n            />\n            <PrivateRoute\n              path=\"/app/setSR\"\n              component={WorkshopSetSR}\n              userRole={role}\n              allowedRole={ROLES_ENUM.WORKSHOP}\n            />\n            <PrivateRoute\n              path=\"/app/insurance\"\n              component={Notifications}\n              userRole={role}\n              allowedRole={ROLES_ENUM.INSURANCE}\n            />\n            <Route\n              exact\n              path=\"/app/ui\"\n              render={() => <Redirect to=\"/app/ui/icons\" />}\n            />\n            <Route exact path=\"/app/misc\" component={MiscPage} />\n            <Route path=\"/app/ui/icons\" component={Icons} />\n            <Route path=\"/app/ui/charts\" component={Charts} />\n          </Switch>\n          <Box\n            mt={5}\n            width={\"100%\"}\n            display={\"flex\"}\n            alignItems={\"center\"}\n            justifyContent=\"space-between\"\n          >\n            <div>\n              <Link\n                color={\"primary\"}\n                href={\"https://flatlogic.com/\"}\n                target={\"_blank\"}\n                className={classes.link}\n              >\n                Flatlogic\n              </Link>\n              <Link\n                color={\"primary\"}\n                href={\"https://flatlogic.com/about\"}\n                target={\"_blank\"}\n                className={classes.link}\n              >\n                About Us\n              </Link>\n              <Link\n                color={\"primary\"}\n                href={\"https://flatlogic.com/blog\"}\n                target={\"_blank\"}\n                className={classes.link}\n              >\n                Blog\n              </Link>\n            </div>\n            <div>\n              <Link\n                href={\"https://www.facebook.com/flatlogic\"}\n                target={\"_blank\"}\n              >\n                <IconButton aria-label=\"facebook\">\n                  <Icon path={FacebookIcon} size={1} color=\"#6E6E6E99\" />\n                </IconButton>\n              </Link>\n              <Link href={\"https://twitter.com/flatlogic\"} target={\"_blank\"}>\n                <IconButton aria-label=\"twitter\">\n                  <Icon path={TwitterIcon} size={1} color=\"#6E6E6E99\" />\n                </IconButton>\n              </Link>\n              <Link href={\"https://github.com/flatlogic\"} target={\"_blank\"}>\n                <IconButton aria-label=\"github\" style={{ marginRight: -12 }}>\n                  <Icon path={GithubIcon} size={1} color=\"#6E6E6E99\" />\n                </IconButton>\n              </Link>\n            </div>\n          </Box>\n        </div>\n      </>\n    </div>\n  );\n}\n\nconst PrivateRoute = ({ component, userRole, allowedRole, ...rest }) => {\n  const isAuthenticated = userRole === allowedRole;\n  const rolePath = userRole.split(\" \")[0].toLowerCase();\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        isAuthenticated ? (\n          React.createElement(component, { ...props, role: userRole })\n        ) : (\n          <Redirect\n            to={{\n              pathname: `/app/${rolePath}`,\n              state: {\n                from: props.location,\n              },\n            }}\n          />\n        )\n      }\n    />\n  );\n};\n\nexport default withRouter(Layout);\n","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/login/Login.js",["252"],"\nimport {\n  Grid\n} from \"@material-ui/core\";\nimport React from \"react\";\n// styles\nimport useStyles from \"./styles\";\n\n\nconst Login = (props) => {\n  var classes = useStyles();\n  const { isLoggedIn } = props;\n  return (\n    <Grid container className={classes.container}>\n      \n      <div className=\"pure-g\" className={classes.loginContainer}>\n        <div style={{width: '30%'}}>\n          <div style={{display: 'flex', justifyContent: 'center', fontSize: '32px'}}>🦊</div>\n          <h3>\n            <div style={{display: 'flex', justifyContent: 'center'}}><strong>{\"We can't find any Ethereum accounts!\"}</strong></div>\n            <div style={{display: 'flex', justifyContent: 'center', textAlign: 'center'}}>\n              {!isLoggedIn?\n                \"Please log in to your wallet on Metamask.\"\n              :\n                \"Please check and make sure Metamask or your browser Ethereum wallet is pointed at the correct network and your account is unlocked. Please also check that your account has been registered on our Vehicle Registry Network.\"\n              }\n            </div>\n          </h3>\n        </div>\n      </div>\n    </Grid>\n  );\n}\n\nexport default Login;\n","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/themes/default.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/login/styles.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/error/styles.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Layout/styles.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/charts/Charts.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/tables/Tables.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/notifications/Notifications.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/typography/Typography.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Header/Header.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/dashboard/Dashboard.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Sidebar/Sidebar.js",["253","254","255","256","257","258"],"import React, { useState, useEffect } from \"react\";\nimport { Drawer, IconButton, List } from \"@material-ui/core\";\nimport {\n  Home as HomeIcon,\n  NotificationsNone as NotificationsIcon,\n  FormatSize as TypographyIcon,\n  FilterNone as UIElementsIcon,\n  BorderAll as TableIcon,\n  QuestionAnswer as SupportIcon,\n  LibraryBooks as LibraryIcon,\n  HelpOutline as FAQIcon,\n  ArrowBack as ArrowBackIcon,\n} from \"@material-ui/icons\";\nimport { useTheme } from \"@material-ui/styles\";\nimport { withRouter } from \"react-router-dom\";\nimport classNames from \"classnames\";\n\n// styles\nimport useStyles from \"./styles\";\n\n// components\nimport SidebarLink from \"./components/SidebarLink/SidebarLink\";\nimport Dot from \"./components/Dot\";\n\n// context\nimport {\n  useLayoutState,\n  useLayoutDispatch,\n  toggleSidebar,\n} from \"../../context/LayoutContext\";\nimport { ROLES_ENUM } from \"../../constants\";\n\nconst structure = [\n  {\n    id: 0,\n    label: \"Dashboard\",\n    link: \"/app/dashboard\",\n    icon: <HomeIcon />,\n    allowedRole: ROLES_ENUM.ADMINISTRATOR,\n  },\n  {\n    id: 1,\n    label: \"Administrator\",\n    link: \"/app/administrator\",\n    icon: <TypographyIcon />,\n    allowedRole: ROLES_ENUM.ADMINISTRATOR,\n  },\n  {\n    id: 2,\n    label: \"Owner\",\n    link: \"/app/owner\",\n    icon: <NotificationsIcon />,\n    allowedRole: ROLES_ENUM.OWNER,\n  },\n  {\n    id: 3,\n    label: \"Dealer\",\n    link: \"/app/dealer\",\n    icon: <UIElementsIcon />,\n    allowedRole: ROLES_ENUM.DEALER,\n  },\n  {\n    id: 4,\n    label: \"Workshop\",\n    link: \"/app/workshop\",\n    icon: <HomeIcon />,\n    allowedRole: ROLES_ENUM.WORKSHOP,\n  },\n  {\n    id: 5,\n    label: \"Add Servicing Record\",\n    link: \"/app/setSR\",\n    icon: <UIElementsIcon />,\n    allowedRole: ROLES_ENUM.WORKSHOP,\n  },\n  {\n    id: 6,\n    label: \"Insurance\",\n    link: \"/app/insurance\",\n    icon: <UIElementsIcon />,\n    allowedRole: ROLES_ENUM.INSURANCE,\n  },\n  {\n    id: 7,\n    label: \"Misc (to be deleted)\",\n    link: \"/app/misc\",\n    icon: <UIElementsIcon />,\n  },\n];\n\nconst Sidebar = ({ location, role }) => {\n  var classes = useStyles();\n  var theme = useTheme();\n\n  // global\n  var { isSidebarOpened } = useLayoutState();\n  var layoutDispatch = useLayoutDispatch();\n\n  // local\n  var [isPermanent, setPermanent] = useState(true);\n\n  useEffect(function () {\n    window.addEventListener(\"resize\", handleWindowWidthChange);\n    handleWindowWidthChange();\n    return function cleanup() {\n      window.removeEventListener(\"resize\", handleWindowWidthChange);\n    };\n  });\n\n  return (\n    <Drawer\n      variant={isPermanent ? \"permanent\" : \"temporary\"}\n      className={classNames(classes.drawer, {\n        [classes.drawerOpen]: isSidebarOpened,\n        [classes.drawerClose]: !isSidebarOpened,\n      })}\n      classes={{\n        paper: classNames({\n          [classes.drawerOpen]: isSidebarOpened,\n          [classes.drawerClose]: !isSidebarOpened,\n        }),\n      }}\n      open={isSidebarOpened}\n    >\n      <div className={classes.toolbar} />\n      <div className={classes.mobileBackButton}>\n        <IconButton onClick={() => toggleSidebar(layoutDispatch)}>\n          <ArrowBackIcon\n            classes={{\n              root: classNames(classes.headerIcon, classes.headerIconCollapse),\n            }}\n          />\n        </IconButton>\n      </div>\n      <List className={classes.sidebarList}>\n        {structure.map((link) => {\n          if (!link.allowedRole || link.allowedRole === role) {\n            return (\n              <SidebarLink\n                key={link.id}\n                location={location}\n                isSidebarOpened={isSidebarOpened}\n                {...link}\n              />\n            );\n          }\n        })}\n      </List>\n    </Drawer>\n  );\n\n  // ##################################################################\n  function handleWindowWidthChange() {\n    var windowWidth = window.innerWidth;\n    var breakpointWidth = theme.breakpoints.values.md;\n    var isSmallScreen = windowWidth < breakpointWidth;\n\n    if (isSmallScreen && isPermanent) {\n      setPermanent(false);\n    } else if (!isSmallScreen && !isPermanent) {\n      setPermanent(true);\n    }\n  }\n};\n\nexport default withRouter(Sidebar);\n","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/icons/Icons.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/dashboard/mock.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/dashboard/styles.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Header/styles.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Sidebar/components/Dot.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Sidebar/styles.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/dashboard/components/BigStat/BigStat.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/dashboard/components/Table/Table.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Sidebar/components/SidebarLink/SidebarLink.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/icons/styles.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/UserAvatar/UserAvatar.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/PageTitle/PageTitle.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Notification/Notification.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Wrappers/Wrappers.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Widget/Widget.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Sidebar/components/SidebarLink/styles.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/dashboard/components/BigStat/styles.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/PageTitle/styles.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/UserAvatar/styles.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Notification/styles.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Widget/styles.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/notifications/styles.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/typography/styles.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/charts/components/ApexHeatmap.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/charts/components/ApexLineChart.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/drizzleOptions.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/constants.js",[],"/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/admin/index.js",["259","260","261","262","263"],"import React from \"react\";\nimport {\n  Grid,\n  LinearProgress,\n  Select,\n  OutlinedInput,\n  MenuItem,\n  Button,\n} from \"@material-ui/core\";\n\nimport PageTitle from \"../../components/PageTitle/PageTitle\";\n\nconst AdminPage = () => {\n  return (\n    <>\n      <PageTitle\n        title=\"Admin\"\n        button={\n          <Button variant=\"contained\" size=\"medium\" color=\"secondary\">\n            Latest Reports\n          </Button>\n        }\n      />\n    </>\n  );\n};\n\nexport default AdminPage;\n","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/owner/index.js",["264"],"import { drizzleReactHooks } from \"@drizzle/react-plugin\";\nimport { Grid } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport ViewCard from \"../../components/ViewCard\";\nimport TableCard from \"../../components/ViewCard/table\";\nimport {\n  accidentColumns,\n  servicingColumns,\n  vehicleColumns,\n} from \"../../constants\";\nimport VehicleRegistryService from \"../../services/VehicleRegistry\";\n\nconst { useDrizzle, useDrizzleState } = drizzleReactHooks;\n\nconst OwnerPage = () => {\n  const state = useDrizzleState((state) => state);\n  const account = state.accounts[0];\n  const { drizzle } = useDrizzle();\n  const [userInfo, setUserInfo] = useState({});\n  const [userVehicles, setUserVehicles] = useState([]);\n  const [userAccidents, setUserAccidents] = useState([]);\n  const [userServicing, setUserServicing] = useState([]);\n\n  const retrieveOwner = async () => {\n    const results = await VehicleRegistryService.retrieveOwnerDealerInfo(\n      drizzle,\n      account,\n    );\n    console.log(\"results\", results);\n    setUserInfo(results);\n  };\n\n  const retrieveVehicles = async () => {\n    const vehicles = await VehicleRegistryService.retrieveAllVehiclesOwn(\n      drizzle,\n      account,\n    );\n    setUserVehicles(vehicles);\n    console.log(\"vehicles =\", vehicles);\n  };\n\n  const retrieveAccidents = async () => {\n    const accidents = await VehicleRegistryService.retrieveAllAccidentHistory(\n      drizzle,\n      account,\n    );\n    setUserAccidents(accidents);\n  };\n\n  const retrieveServicing = async () => {\n    const servicing = await VehicleRegistryService.retrieveAllServicingHistory(\n      drizzle,\n      account,\n    );\n    setUserServicing(servicing);\n  };\n  useEffect(() => {\n    retrieveOwner();\n    retrieveVehicles();\n    retrieveAccidents();\n    retrieveServicing();\n  }, []);\n  return (\n    <Grid container direction={\"column\"} spacing={4}>\n      <ViewCard userData={userInfo} title={\"User Details\"} />\n      <TableCard\n        data={userVehicles}\n        title={\"Vehicles Data\"}\n        columns={[\n          \"vehicleId\",\n          ...vehicleColumns.details1,\n          ...vehicleColumns.details1p2,\n          ...vehicleColumns.details2,\n        ]}\n        cardWidth={\"100%\"}\n        hasAck={true}\n        onClick={(_data) => console.log(_data)}\n      />\n      <TableCard\n        data={userAccidents}\n        title={\"Accident Records\"}\n        columns={[\n          \"vehicleId\",\n          ...accidentColumns.accident1,\n          ...accidentColumns.accident2,\n        ]}\n        cardWidth={\"100%\"}\n      />\n\n      <TableCard\n        data={userServicing}\n        title={\"Servicing Records\"}\n        columns={[\n          \"vehicleId\",\n          ...servicingColumns.history1,\n          ...servicingColumns.history2,\n        ]}\n        cardWidth={\"100%\"}\n      />\n    </Grid>\n  );\n};\n\nexport default OwnerPage;\n","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/misc/index.js",["265","266","267","268","269","270","271","272","273","274"],"import React, { useState } from \"react\";\nimport {\n  Grid,\n  CircularProgress,\n  Typography,\n  Button,\n  Modal,\n  Tabs,\n  Tab,\n  TextField,\n  Fade,\n} from \"@material-ui/core\";\nimport VehicleRegistryService from \"../../services/VehicleRegistry\";\nimport { vehicleColumns } from \"../../constants\";\nimport ModalForm from \"../../components/Modal/form\";\n\n// drizzle\nimport { drizzleReactHooks } from \"@drizzle/react-plugin\";\nconst { useDrizzle, useDrizzleState } = drizzleReactHooks;\n\nconst MiscPage = () => {\n  return (\n    <Grid container>\n      <AddOwnerCard />\n      <AddVehicleCom />\n      <AddWorkshopCard />\n    </Grid>\n  );\n};\nconst AddOwnerCard = () => {\n  const { drizzle } = useDrizzle();\n  const [ownerAddress, setOwnerAddress] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [contact, setContact] = useState(\"\");\n  const [companyRegNo, setCompanyRegNo] = useState(\"\");\n  const [physicalAddress, setPhysicalAddress] = useState(\"\");\n  const [DOR, setDOR] = useState(\"\");\n\n  const submit = async () => {\n    const response = await VehicleRegistryService.registerOwnerDealer(drizzle, {\n      ownerAddress,\n      name,\n      contact,\n      companyRegNo,\n      physicalAddress,\n      DOR,\n    });\n    console.log(response);\n  };\n\n  // address = 0x58Ff09a4aFBf3cDD9791Bc603F4630D2c3fb3857\n  return (\n    <Grid\n      container\n      style={{\n        backgroundColor: \"white\",\n        border: \"1px solid #e8e8e8\",\n        padding: \"24px\",\n      }}\n    >\n      <Grid container>\n        registerOwnerDealer\n        <TextField\n          id=\"name\"\n          value={ownerAddress}\n          onChange={(e) => setOwnerAddress(e.target.value)}\n          margin=\"normal\"\n          placeholder=\"Owner/Dealer address\"\n          type=\"text\"\n          fullWidth\n        />\n        <TextField\n          id=\"name\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          margin=\"normal\"\n          placeholder=\"Name\"\n          type=\"text\"\n          fullWidth\n        />\n        <TextField\n          id=\"name\"\n          value={contact}\n          onChange={(e) => setContact(e.target.value)}\n          margin=\"normal\"\n          placeholder=\"Contact No.\"\n          type=\"text\"\n          fullWidth\n        />\n        <TextField\n          id=\"name\"\n          value={companyRegNo}\n          onChange={(e) => setCompanyRegNo(e.target.value)}\n          margin=\"normal\"\n          placeholder=\"Company Register Number\"\n          type=\"text\"\n          fullWidth\n        />\n        <TextField\n          id=\"name\"\n          value={physicalAddress}\n          onChange={(e) => setPhysicalAddress(e.target.value)}\n          margin=\"normal\"\n          placeholder=\"Physical Address\"\n          type=\"text\"\n          fullWidth\n        />\n        <TextField\n          id=\"name\"\n          value={DOR}\n          onChange={(e) => setDOR(e.target.value)}\n          margin=\"normal\"\n          placeholder=\"Date of Reg\"\n          type=\"text\"\n          fullWidth\n        />\n        <Button onClick={() => submit()}>Submit</Button>\n      </Grid>\n    </Grid>\n  );\n};\n\nconst AddVehicleCom = () => {\n  const [visible, setVisible] = useState(false);\n  const { drizzle } = useDrizzle();\n\n  const addVehicle = async (data) => {\n    console.log(\"data =\", data);\n    const body1 = {};\n    const body2 = {};\n    const bodyKeys1 = [\n      ...vehicleColumns.details1,\n      ...vehicleColumns.details1p2,\n    ];\n    bodyKeys1.map((key) => {\n      body1[key] = data[key];\n    });\n    vehicleColumns.details2.map((key) => {\n      body2[key] = data[key];\n    });\n    const ownerAddress = data.ownerAddress;\n\n    const resp = await Promise.all([\n      VehicleRegistryService.registerVehicleToOwner1(\n        drizzle,\n        body1,\n        ownerAddress,\n      ),\n      VehicleRegistryService.registerVehicleToOwner2(\n        drizzle,\n        body2,\n        ownerAddress,\n      ),\n    ]);\n    console.log(\"resp =\", resp);\n  };\n\n  return (\n    <div>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => setVisible(!visible)}\n      >\n        Add Vehicle\n      </Button>\n\n      <ModalForm\n        title={\"Add Vehicle\"}\n        visible={visible}\n        toggleVisible={() => setVisible(!visible)}\n        onSubmit={addVehicle}\n        keys={[\n          ...vehicleColumns.details1,\n          ...vehicleColumns.details1p2,\n          ...vehicleColumns.details2,\n          ...vehicleColumns.ownerAddress,\n        ]}\n      />\n    </div>\n  );\n};\n\nconst AddWorkshopCard = () => {\n  const [visible, setVisible] = useState(false);\n  const { drizzle } = useDrizzle();\n\n  const addWorkshop = async (data) => {\n    console.log(\"data =\", data);\n    const body1 = {};\n    const bodyKeys1 = [\n      'workshopAddress',\n      'workshopName',\n      'workshopRegNo',\n      'physicalAddress',\n      'contact',\n      'DOR',\n    ];\n    bodyKeys1.map((key) => {\n      body1[key] = data[key];\n    });\n    // const workshopAddress = data.workshopAddress;\n\n    const resp = await Promise.all([\n      VehicleRegistryService.registerWorkshop(\n        drizzle,\n        body1,\n      ),\n    ]);\n    console.log(\"resp =\", resp);\n  };\n\n  return (\n    <div>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => setVisible(!visible)}\n      >\n        Add Workshop\n      </Button>\n\n      <ModalForm\n        title={\"Add Workshop\"}\n        visible={visible}\n        toggleVisible={() => setVisible(!visible)}\n        onSubmit={addWorkshop}\n        keys={[\n          'workshopAddress',\n          'workshopName',\n          'workshopRegNo',\n          'physicalAddress',\n          'contact',\n          'DOR',\n        ]}\n      />\n    </div>\n  );\n};\nexport default MiscPage;\n","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/ViewCard/table.js",["275","276","277","278","279","280","281","282","283"],"import {\n  Button,\n  Card,\n  CardContent,\n  Grid,\n  Table,\n  TableCell,\n  TableRow,\n  TableContainer,\n  TableBody,\n  Paper,\n  TableHead,\n} from \"@material-ui/core\";\nimport MUIDataTable from \"mui-datatables\";\nimport React from \"react\";\n\n// clickrow can be any function that requires an action (eg. delete/acknowledge row)\nconst TableCard = ({\n  data,\n  title,\n  columns,\n  cardWidth,\n  clickRow,\n  hasDelete,\n  hasAck,\n}) => {\n  const tableData = data.map((row) => Object.values(row));\n  const tableColumns = columns.map((key) => {\n    const headerName = key[0].toUpperCase() + key.substring(1);\n    return {\n      name: headerName,\n    };\n  });\n  if (hasDelete) {\n    // if usecase requires user to be able to delete rows\n    tableColumns.push({\n      name: \"Action\",\n      options: {\n        customBodyRender: (row) => {\n          const onClick = () => {\n            clickRow(row);\n          };\n          return (\n            <Button variant=\"outlined\" color=\"secondary\" onClick={onClick}>\n              Delete\n            </Button>\n          );\n        },\n      },\n    });\n  }\n\n  if (hasAck) {\n    // if usecase requires user to be able to acknowledge rows\n    tableColumns.push({\n      name: \"Action\",\n      options: {\n        customBodyRender: (row) => {\n          const onClick = () => {\n            clickRow(row);\n          };\n          return (\n            <Button variant=\"contained\" color=\"primary\" onClick={onClick}>\n              Mark as verified\n            </Button>\n          );\n        },\n      },\n    });\n  }\n\n  return (\n    <Grid item style={{ width: cardWidth }}>\n      <MUIDataTable\n        title={\n          <div style={{ fontWeight: \"bold\", fontSize: \"18px\" }}>{title}</div>\n        }\n        data={tableData}\n        columns={tableColumns}\n        options={{ selectableRowsHideCheckboxes: true }}\n      />\n    </Grid>\n  );\n};\n\nexport default TableCard;\n","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/Modal/form.js",["284"],"import { Button, Grid, Modal, TextField } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React, { useState, useEffect } from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: \"relative\",\n    width: \"50%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    // border: \"2px solid #000\",\n    // backgroundColor: theme.palette.background.paper,\n    maxHeight: \"600px\",\n    backgroundColor: \"white\",\n    justifyContent: \"space-between\",\n    // padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nconst ModalForm = ({ visible, toggleVisible, onSubmit, keys, title }) => {\n  const classes = useStyles();\n  const [formData, setFormData] = useState({});\n\n  useEffect(() => {\n    const formD = {};\n    keys.map((key) => {\n      formD[key] = \"\";\n    });\n    setFormData(formD);\n  }, [keys]);\n  return (\n    <div>\n      <Modal\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          outline: \"none\",\n        }}\n        open={visible}\n        onClose={toggleVisible}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        <div className={classes.paper}>\n          <div\n            style={{\n              fontSize: \"20px\",\n              fontWeight: \"bold\",\n              padding: \"20px\",\n              borderBottom: \"1px solid #e8e8e8\",\n            }}\n          >\n            {title}\n          </div>\n          <div style={{ overflow: \"auto\", padding: \"20px\" }}>\n            {keys.map((key, i) => {\n              const label = key[0].toUpperCase() + key.substring(1);\n              return (\n                <Grid container key={key} style={{ marginBottom: \"8px\" }}>\n                  <Grid\n                    item\n                    xs={12}\n                    sm={3}\n                    style={{\n                      display: \"flex\",\n                      justifyContent: \"flex-end\",\n                      alignItems: \"center\",\n                      paddingRight: \"8px\",\n                      fontWeight: \"300\",\n                      fontSize: \"18px\",\n                    }}\n                  >\n                    {label}:\n                  </Grid>\n                  <Grid item xs={12} sm={9}>\n                    <TextField\n                      value={formData[key]}\n                      onChange={(e) =>\n                        setFormData({\n                          ...formData,\n                          [key]: e.target.value,\n                        })\n                      }\n                      placeholder={label}\n                      type=\"text\"\n                      fullWidth\n                    />\n                  </Grid>\n                </Grid>\n              );\n            })}\n          </div>\n\n          <div\n            style={{\n              display: \"flex\",\n              padding: \"20px\",\n              justifyContent: \"flex-end\",\n            }}\n          >\n            <Button variant=\"outlined\" color=\"default\" onClick={toggleVisible}>\n              Cancel\n            </Button>\n\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => onSubmit(formData)}\n            >\n              Submit\n            </Button>\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default ModalForm;\n","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/services/VehicleRegistry.js",["285","286","287"],"class VehicleRegistryService {\n  // ==================================== USERS ====================================\n  static async registerOwnerDealer(drizzle, values) {\n    const strConvert = drizzle.web3.utils.utf8ToHex;\n    try {\n      const success = await drizzle.contracts.VehicleRegistry.methods\n        .registerOwnerDealer(\n          values.ownerAddress,\n          strConvert(values.name),\n          values.contact,\n          strConvert(values.companyRegNo),\n          strConvert(values.physicalAddress),\n          strConvert(values.DOR),\n          false,\n        )\n        .send();\n\n      if (success) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (e) {\n      console.log(\"e =\", e);\n      return false;\n    }\n  }\n\n  static async retrieveOwnerDealerInfo(drizzle, ownerAddress) {\n    const hexConvert = drizzle.web3.utils.toUtf8;\n    try {\n      const res = await drizzle.contracts.VehicleRegistry.methods\n        .retrieveOwnerDealerInfo(ownerAddress)\n        .call();\n      console.log(\"res =\", res);\n      if (res) {\n        const info = {\n          name: hexConvert(res[0]),\n          contact: res[1],\n          companyRegNo: hexConvert(res[2]),\n          physicalAddress: hexConvert(res[3]),\n          isDealer: res[4],\n          noOfVehiclesOwn: res[5],\n        };\n        return info;\n      } else {\n        return false;\n      }\n    } catch (e) {\n      console.log(\"e =\", e);\n      return false;\n    }\n  }\n\n  static async registerWorkshop(drizzle, values) {\n    const strConvert = drizzle.web3.utils.utf8ToHex;\n    try {\n      const success = await drizzle.contracts.VehicleRegistry.methods\n        .registerWorkshop(\n          values.workshopAddress,\n          strConvert(values.workshopName),\n          strConvert(values.workshopRegNo),\n          strConvert(values.physicalAddress),\n          values.contact,\n          strConvert(values.DOR),\n        )\n        .send();\n\n      if (success) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (e) {\n      console.log(\"e =\", e);\n      return false;\n    }\n  }\n  static async retrieveWorkshopInfo(drizzle, workshopAddress) {\n    const hexConvert = drizzle.web3.utils.toUtf8;\n    try {\n      const res = await drizzle.contracts.VehicleRegistry.methods\n        .retrieveWorkshopInfo(workshopAddress)\n        .call();\n      console.log(\"res =\", res);\n      if (res) {\n        const info = {\n          workshopName: hexConvert(res[0]),\n          workshopRegNo: hexConvert(res[1]),\n          physicalAddress: hexConvert(res[2]),\n          workshopContact: res[3],\n          DOR: hexConvert(res[4]),\n        };\n        return info;\n      } else {\n        return false;\n      }\n    } catch (e) {\n      console.log(\"e =\", e);\n      return false;\n    }\n  }\n  static async updateWorkshopInfo(drizzle, values) {\n    const strConvert = drizzle.web3.utils.utf8ToHex;\n    try {\n      const success = await drizzle.contracts.VehicleRegistry.methods\n        .updateWorkshopInfo(\n          values.workshopAddress,\n          strConvert(values.workshopName),\n          strConvert(values.workshopRegNo),\n          strConvert(values.physicalAddress),\n          values.contact,\n          strConvert(values.DOR),\n        )\n        .send();\n\n      if (success) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (e) {\n      console.log(\"e =\", e);\n      return false;\n    }\n  }\n  static async addServicingRecord(drizzle, values) {\n    const strConvert = drizzle.web3.utils.utf8ToHex;\n    try {\n      const success = await drizzle.contracts.VehicleRegistry.methods\n        .addServicingRecord(\n          values.vehicleId,\n          strConvert(values.dateCompleted),\n          strConvert(values.workshopRegNo),\n          strConvert(values.typeOfWorkDone),\n          strConvert(values.appointedMechanic),\n          strConvert(values.currentMileage),\n          strConvert(values.workDone),\n          strConvert(values.totalCharges),\n        )\n        .send();\n\n      if (success) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (e) {\n      console.log(\"e =\", e);\n      return false;\n    }\n  }\n  static async retrieveAllVehIdsServicedBy(drizzle, workshopAddress) {\n    const hexConvert = drizzle.web3.utils.toUtf8;\n    try {\n      const res = await drizzle.contracts.VehicleRegistry.methods\n        .retrieveAllVehIdsServicedBy(workshopAddress)\n        .call();\n      console.log(\"res =\", res);\n      if (res) {\n        // const info = {\n        //   name: hexConvert(res[0]),\n        //   contact: res[1],\n        //   companyRegNo: hexConvert(res[2]),\n        //   physicalAddress: hexConvert(res[3]),\n        //   isDealer: res[4],\n        //   noOfVehiclesOwn: res[5],\n        // };\n        return res;\n      } else {\n        return false;\n      }\n    } catch (e) {\n      console.log(\"e =\", e);\n      return false;\n    }\n  }\n\n\n  // ==================================== VEHICLES ====================================\n\n  static async retrieveAllVehiclesOwn(drizzle, ownerAddress) {\n    try {\n      const vehIds = await drizzle.contracts.VehicleRegistry.methods\n        .retrieveAllVehiclesOwn(ownerAddress)\n        .call();\n      console.log(\"vehIds =\", vehIds);\n      if (vehIds) {\n        const vehicles = await Promise.all(\n          vehIds.map(async (id) => {\n            const data = await Promise.all([\n              await this.retrieveVehicleDetails1(drizzle, id),\n              await this.retrieveVehicleDetails1Part2(drizzle, id),\n              await this.retrieveVehicleDetails2(drizzle, id),\n            ]);\n            return {\n              vehicleId: id,\n              ...data[0],\n              ...data[1],\n              ...data[2],\n            };\n          }),\n        );\n        console.log(\"veh =\", vehicles);\n        return vehicles;\n      } else {\n        return [];\n      }\n    } catch (e) {\n      console.log(\"e =\", e);\n      return [];\n    }\n  }\n\n  static async retrieveVehicleDetails1(drizzle, vehicleId) {\n    const hexConvert = drizzle.web3.utils.toUtf8;\n    try {\n      const res = await drizzle.contracts.VehicleRegistry.methods\n        .retrieveVehicleDetails1(vehicleId)\n        .call();\n      if (res) {\n        const details1 = {\n          vehicleNo: hexConvert(res[0]),\n          makeModel: hexConvert(res[1]),\n          manufacturingYear: res[2],\n          engineNo: hexConvert(res[3]),\n          chassisNo: hexConvert(res[4]),\n        };\n        console.log(\"details 1=\", details1);\n        return details1;\n      } else {\n        return false;\n      }\n    } catch (e) {\n      console.log(\"e =\", e);\n      return false;\n    }\n  }\n\n  static async retrieveVehicleDetails1Part2(drizzle, vehicleId) {\n    const hexConvert = drizzle.web3.utils.toUtf8;\n    try {\n      const res = await drizzle.contracts.VehicleRegistry.methods\n        .retrieveVehicleDetails1Part2(vehicleId)\n        .call();\n      if (res) {\n        const details1p2 = {\n          omv: res[0],\n          originalRegDate: hexConvert(res[1]),\n          effectiveRegDate: hexConvert(res[2]),\n        };\n        console.log(\"details1p2 =\", details1p2);\n        return details1p2;\n      } else {\n        return false;\n      }\n    } catch (e) {\n      console.log(\"e =\", e);\n      return false;\n    }\n  }\n\n  static async retrieveVehicleDetails2(drizzle, vehicleId) {\n    const hexConvert = drizzle.web3.utils.toUtf8;\n    try {\n      const res = await drizzle.contracts.VehicleRegistry.methods\n        .retrieveVehicleDetails2(vehicleId)\n        .call();\n      if (res) {\n        const details2 = {\n          noOfTransfers: res[0],\n          engineCap: hexConvert(res[1]),\n          coeCat: hexConvert(res[2]),\n          quotaPrem: res[3],\n          ownerName: hexConvert(res[4]),\n        };\n        return details2;\n      } else {\n        return false;\n      }\n    } catch (e) {\n      console.log(\"e =\", e);\n      return false;\n    }\n  }\n\n  static async registerVehicleToOwner1(drizzle, values, ownerAddress) {\n    const strConvert = drizzle.web3.utils.utf8ToHex;\n    try {\n      const success = await drizzle.contracts.VehicleRegistry.methods\n        .registerVehicleToOwner1(\n          strConvert(values.vehicleNo),\n          strConvert(values.makeModel),\n          values.manufacturingYear,\n          strConvert(values.engineNo),\n          strConvert(values.chassisNo),\n          values.omv,\n          strConvert(values.originalRegDate),\n          strConvert(values.effectiveRegDate),\n          ownerAddress,\n        )\n        .send();\n      if (success) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (e) {\n      console.log(\"e =\", e);\n      return false;\n    }\n  }\n\n  static async registerVehicleToOwner2(drizzle, values, ownerAddress) {\n    const strConvert = drizzle.web3.utils.utf8ToHex;\n    try {\n      const success = await drizzle.contracts.VehicleRegistry.methods\n        .registerVehicleToOwner2(\n          ownerAddress,\n          values.noOfTransfers,\n          strConvert(values.engineCap),\n          strConvert(values.coeCat),\n          values.quotaPrem,\n          strConvert(values.ownerName),\n        )\n        .send();\n      if (success) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (e) {\n      console.log(\"e =\", e);\n      return false;\n    }\n  }\n\n  // ==================================== ACCIDENT RECORDS ====================================\n  static async retrieveAllAccidentHistory(drizzle, ownerAddress) {\n    try {\n      const vehIds = await drizzle.contracts.VehicleRegistry.methods\n        .retrieveAllVehiclesOwn(ownerAddress)\n        .call();\n      if (vehIds) {\n        // AccidenIds is an array of accidentId arrays for each veh\n        const accidentIds = await Promise.all(\n          vehIds.map(async (vehId) => {\n            return drizzle.contracts.VehicleRegistry.retrieveAllAccidentRecordsOn(\n              vehId,\n            );\n          }),\n        );\n\n        // _ids = { [vehId]: vehAccidentIds }\n        const _ids = {};\n        vehIds.map((id, i) => {\n          _ids[id] = accidentIds[i];\n        });\n        console.log(\"accidentIds =\", accidentIds);\n        const accidentRecords = await Promise.all(\n          vehIds.map(async (vehId) => {\n            const accidentRecordsForOneVehicle = _ids[vehId].map(\n              async (accidentId) => {\n                const data = await Promise.all([\n                  this.retrieveAccidentHistory1(drizzle, vehId, accidentId),\n                  this.retrieveAccidentHistory2(drizzle, vehId, accidentId),\n                ]);\n                return {\n                  ...data[0],\n                  ...data[1],\n                  vehicleId: vehId,\n                };\n              },\n            );\n            console.log(\n              \"accidentRecordsForOneVehicle= \",\n              accidentRecordsForOneVehicle,\n            );\n            return accidentRecordsForOneVehicle;\n          }),\n        );\n        // console.log(\"veh =\", vehicles);\n        return accidentRecords;\n      } else {\n        return [];\n      }\n    } catch (e) {\n      console.log(\"e =\", e);\n      return [];\n    }\n  }\n\n  static async retrieveAccidentHistory1(drizzle, vehicleId, accidentId) {\n    const hexConvert = drizzle.web3.utils.toUtf8;\n    try {\n      const res = await drizzle.contracts.VehicleRegistry.methods\n        .retrieveAccidentHistory1(vehicleId, accidentId)\n        .call();\n      if (res) {\n        const history1 = {\n          accidentDateLocation: hexConvert(res[0]),\n          driverName: hexConvert(res[1]),\n          timeOfAccident: hexConvert(res[2]),\n          descriptionOfAccident: hexConvert(res[3]),\n          insuranceCoName: hexConvert(res[4]),\n        };\n        return history1;\n      } else {\n        return false;\n      }\n    } catch (e) {\n      console.log(\"e =\", e);\n      return false;\n    }\n  }\n\n  static async retrieveAccidentHistory2(drizzle, vehicleId, accidentId) {\n    const hexConvert = drizzle.web3.utils.toUtf8;\n    try {\n      const res = await drizzle.contracts.VehicleRegistry.methods\n        .retrieveAccidentHistory2(vehicleId, accidentId)\n        .call();\n      if (res) {\n        const history2 = {\n          appointedWorkshopNo: hexConvert(res[0]),\n          servicingId: res[1],\n          remarks: hexConvert(res[2]),\n          claimIssued: res[3],\n        };\n        return history2;\n      } else {\n        return false;\n      }\n    } catch (e) {\n      console.log(\"e =\", e);\n      return false;\n    }\n  }\n\n  // ==================================== SERVICING RECORDS ====================================\n  static async retrieveAllServicingHistory(drizzle, ownerAddress) {\n    try {\n      const vehIds = await drizzle.contracts.VehicleRegistry.methods\n        .retrieveAllVehiclesOwn(ownerAddress)\n        .call();\n      if (vehIds) {\n        // AccidenIds is an array of accidentId arrays for each veh\n        const servicingIds = await Promise.all(\n          vehIds.map(async (vehId) => {\n            return drizzle.contracts.VehicleRegistry.retrieveAllServicingRecordsOn(\n              vehId,\n            );\n          }),\n        );\n\n        // _ids = { [vehId]: vehServicingIds }\n        const _ids = {};\n        vehIds.map((id, i) => {\n          _ids[id] = servicingIds[i];\n        });\n        console.log(\"servicingIds \");\n        const servicingRecords = await Promise.all(\n          vehIds.map(async (vehId) => {\n            const servicingRecordsForOneVehicle = _ids[vehId].map(\n              async (servicingId) => {\n                const data = await Promise.all([\n                  this.retrieveServicingHistory1(drizzle, vehId, servicingId),\n                  this.retrieveServicingHistory2(drizzle, vehId, servicingId),\n                ]);\n                return {\n                  ...data[0],\n                  ...data[1],\n                  vehicleId: vehId,\n                };\n              },\n            );\n            console.log(\n              \"servicingRecordsForOneVehicle= \",\n              servicingRecordsForOneVehicle,\n            );\n            return servicingRecordsForOneVehicle;\n          }),\n        );\n        // console.log(\"veh =\", vehicles);\n        return servicingRecords;\n      } else {\n        return [];\n      }\n    } catch (e) {\n      console.log(\"e =\", e);\n      return [];\n    }\n  }\n\n  static async retrieveServicingHistory1(drizzle, vehicleId, servicingId) {\n    const hexConvert = drizzle.web3.utils.toUtf8;\n    try {\n      const res = await drizzle.contracts.VehicleRegistry.methods\n        .retrieveServicingHistory1(vehicleId, servicingId)\n        .call();\n      if (res) {\n        const history1 = {\n          dateCompleted: hexConvert(res[0]),\n          workshopRegNo: hexConvert(res[1]),\n          appointedMechanic: hexConvert(res[2]),\n          currentMileage: hexConvert(res[3]),\n          workDone: hexConvert(res[4]),\n        };\n        return history1;\n      } else {\n        return false;\n      }\n    } catch (e) {\n      console.log(\"e =\", e);\n      return false;\n    }\n  }\n\n  static async retrieveServicingHistory2(drizzle, vehicleId, servicingId) {\n    const hexConvert = drizzle.web3.utils.toUtf8;\n    try {\n      const res = await drizzle.contracts.VehicleRegistry.methods\n        .retrieveServicingHistory2(vehicleId, servicingId)\n        .call();\n      if (res) {\n        const history2 = {\n          typeOfWorkDone: hexConvert(res[0]),\n          totalCharges: hexConvert(res[1]),\n          acknowledgedByOwner: res[2],\n        };\n        return history2;\n      } else {\n        return false;\n      }\n    } catch (e) {\n      console.log(\"e =\", e);\n      return false;\n    }\n  }\n}\n\nexport default VehicleRegistryService;\n","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/components/ViewCard/index.js",["288","289","290","291","292","293","294"],"import React from \"react\";\nimport {\n  Grid,\n  CircularProgress,\n  Typography,\n  Button,\n  Tabs,\n  Tab,\n  TextField,\n  Fade,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\n\nconst ViewCard = ({ userData, title }) => {\n  const keys = Object.keys(userData);\n  return (\n    <Grid item style={{ width: \"100%\" }}>\n      <Card style={{ width: \"100%\" }}>\n        <CardContent>\n          <div\n            style={{\n              fontSize: \"20px\",\n              fontWeight: \"bold\",\n              padding: \"4px ​4px 14px 4px\",\n              borderBottom: \"1px solid #e8e8e8\",\n              marginBottom: \"12px\",\n            }}\n          >\n            {title}\n          </div>\n          <div style={{ display: \"flex\", flexWrap: \"wrap\", width: \"100%\" }}>\n            {keys.map((key, i) => {\n              const label = key[0].toUpperCase() + key.substring(1);\n              return (\n                <div\n                  key={i}\n                  style={{\n                    marginTop: \"8px\",\n                    marginBottom: \"20px\",\n                    width: \"50%\",\n                  }}\n                >\n                  <div\n                    style={{\n                      fontSize: \"14px\",\n                      fontWeight: \"bold\",\n                      // padding: \"4px 0px\",\n                    }}\n                  >\n                    {label}\n                  </div>\n                  <div style={{ paddingLeft: \"0px\" }}>{userData[key]}</div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nexport default ViewCard;\n","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/workshopInfo/index.js",["295","296","297","298","299","300","301","302"],"import { drizzleReactHooks } from \"@drizzle/react-plugin\";\nimport { Grid, Button } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport ViewCard from \"../../components/ViewCard\";\nimport Widget from \"../../components/Widget\";\nimport PageTitle from \"../../components/PageTitle\";\nimport TableCard from \"../../components/ViewCard/table\";\nimport ModalForm from \"../../components/Modal/form\";\n\nimport {\n  accidentColumns,\n  servicingColumns,\n  vehicleColumns,\n} from \"../../constants\";\nimport VehicleRegistryService from \"../../services/VehicleRegistry\";\n\nconst { useDrizzle, useDrizzleState } = drizzleReactHooks;\n\nconst WorkshopPage = () => {\n  const state = useDrizzleState((state) => state);\n  const account = state.accounts[0];\n  const { drizzle } = useDrizzle();\n  const [workshopInfo, setWorkshopInfo] = useState({});\n\n//   const data = {\"address\": account};\n//   setWorkshopInfo(data);\n  const [AllVehIdsServicedBy, setAllVehIdsServicedBy] = useState([]);\n//   const [userAccidents, setUserAccidents] = useState([]);\n//   const [userServicing, setUserServicing] = useState([]);\n\n  const retrieveWorkshop = async () => {\n    const results = await VehicleRegistryService.retrieveWorkshopInfo(\n      drizzle,\n      account,\n    );\n    console.log(\"results\", results);\n    setWorkshopInfo(results);\n  };\n\n  const retrieveAllVehIdsServicedBy = async () => {\n    const vehicles = await VehicleRegistryService.retrieveAllVehIdsServicedBy(\n      drizzle,\n      account,\n    );\n    setAllVehIdsServicedBy(vehicles);\n    console.log(\"vehicles =\", vehicles);\n  };\n\n\n  useEffect(() => {\n//       setWorkshopInfo(data);\n    retrieveWorkshop();\n    retrieveAllVehIdsServicedBy();\n//     // retrieveAccidents();\n//     // retrieveServicing();\n  }, []);\n  return (\n    <>\n      <PageTitle title=\"Workshop Info\" button={<UpdateWorkshopCard/>} />\n      <Grid container direction={\"column\"} spacing={4}>\n        <ViewCard userData={workshopInfo} title={\"Workshop Details\"} />\n        {/* <UpdateWorkshopCard /> */}\n      </Grid>\n    </>\n  );\n};\nconst UpdateWorkshopCard = () => {\n    const [visible, setVisible] = useState(false);\n    const { drizzle } = useDrizzle();\n  \n    const updateWorkshop = async (data) => {\n      console.log(\"data =\", data);\n      const body1 = {};\n      const bodyKeys1 = [\n        'workshopAddress',\n        'workshopName',\n        'workshopRegNo',\n        'physicalAddress',\n        'contact',\n        'DOR',\n      ];\n      bodyKeys1.map((key) => {\n        body1[key] = data[key];\n      });\n      // const workshopAddress = data.workshopAddress;\n  \n      const resp = await Promise.all([\n        VehicleRegistryService.updateWorkshopInfo(\n          drizzle,\n          body1,\n        ),\n      ]);\n      console.log(\"resp =\", resp);\n    };\n  \n    return (\n      <div>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => setVisible(!visible)}\n        >\n          Update Workshop Info\n        </Button>\n  \n        <ModalForm\n          title={\"Update Workshop details\"}\n          visible={visible}\n          toggleVisible={() => setVisible(!visible)}\n          onSubmit={updateWorkshop}\n          keys={[\n            'workshopAddress',\n            'workshopName',\n            'workshopRegNo',\n            'physicalAddress',\n            'contact',\n            'DOR',\n          ]}\n        />\n      </div>\n    );\n  };\n\nexport default WorkshopPage;\n","/Users/gnanu/Downloads/Blockchains/is4302-vehicle-registry/client/src/pages/wSetSR/index.js",["303","304","305","306","307","308","309","310","311","312"],"import React, { useState } from \"react\";\nimport {\n  Grid,\n  Button,\n  TextField,\n} from \"@material-ui/core\";\nimport VehicleRegistryService from \"../../services/VehicleRegistry\";\nimport { vehicleColumns } from \"../../constants\";\nimport ModalForm from \"../../components/Modal/form\";\n\n// drizzle\nimport { drizzleReactHooks } from \"@drizzle/react-plugin\";\nconst { useDrizzle, useDrizzleState } = drizzleReactHooks;\n\nconst WorkshopSetSR = () => {\n  const state = useDrizzleState((state) => state);\n  // const account = state.accounts[0];\n  const { drizzle } = useDrizzle();\n  const [userInfo, setUserInfo] = useState({});\n  const [ownerAddress, setOwnerAddress] = useState(\"\");\n  const [userVehicles, setUserVehicles] = useState([]);\n  const [userAccidents, setUserAccidents] = useState([]);\n  const [userServicing, setUserServicing] = useState([]);\n\n  const retrieveVehicles = async () => {\n    const vehicles = await VehicleRegistryService.retrieveAllVehiclesOwn(\n      drizzle,\n      ownerAddress,\n    );\n    setUserVehicles(vehicles);\n    console.log(\"vehicles =\", vehicles);\n  };\n\n  // useEffect(() => {\n  //   retrieveVehicles();\n  // }, []);\n\n  // const retrieve = async () => {\n  //       const response = await VehicleRegistryService.addServicingRecord(drizzle, {\n  //           vehicleId,\n  //           dateCompleted,\n  //           workshopRegNo,\n  //           typeOfWorkDone,\n  //           appointedMechanic,\n  //           currentMileage,\n  //           workDone,\n  //           totalCharges,\n  //       });\n  //     };\n\n  return (\n    <Grid container>\n      <TextField\n          id=\"name\"\n          value={ownerAddress}\n          onChange={(e) => setOwnerAddress(e.target.value)}\n          margin=\"normal\"\n          placeholder=\"Enter Owner Blockchain Address\"\n          type=\"text\"\n          fullWidth\n        />\n      <Button \n      onClick={() => retrieveVehicles()} \n      variant=\"contained\"\n      size=\"medium\"\n      color=\"primary\"> \n      Retrieve Vehicles \n      </Button>\n      {/* <AddServicingRecord /> */}\n    </Grid>\n  );\n};\n// const AddServicingRecord = () => {\n//   const { drizzle } = useDrizzle();\n//   const [vehicleId, setVehicleId] = useState(\"\");\n//   const [dateCompleted, setDateCompleted] = useState(\"\");\n//   const [workshopRegNo, setWorkshopRegNo] = useState(\"\");\n//   const [typeOfWorkDone, setTypeOfWorkDone] = useState(\"\");\n//   const [appointedMechanic, setAppointedMechanic] = useState(\"\");\n//   const [currentMileage, setCurrentMileage] = useState(\"\");\n//   const [workDone, setWorkDone] = useState(\"\");\n//   const [totalCharges, setTotalCharges] = useState(\"\");\n\n//   const submit = async () => {\n//     const response = await VehicleRegistryService.addServicingRecord(drizzle, {\n//         vehicleId,\n//         dateCompleted,\n//         workshopRegNo,\n//         typeOfWorkDone,\n//         appointedMechanic,\n//         currentMileage,\n//         workDone,\n//         totalCharges,\n//     });\n//   };\n\n//   // address = 0x58Ff09a4aFBf3cDD9791Bc603F4630D2c3fb3857\n//   return (\n//     <Grid\n//       container\n//       style={{\n//         backgroundColor: \"white\",\n//         border: \"1px solid #e8e8e8\",\n//         padding: \"24px\",\n//       }}\n//     >\n//       <Grid container>\n//         addServicingRecord\n//         <TextField\n//           id=\"name\"\n//           value={vehicleId}\n//           onChange={(e) => setVehicleId(e.target.value)}\n//           margin=\"normal\"\n//           placeholder=\"Vehicle Id\"\n//           type=\"text\"\n//           fullWidth\n//         />\n//         <TextField\n//           id=\"name\"\n//           value={dateCompleted}\n//           onChange={(e) => setDateCompleted(e.target.value)}\n//           margin=\"normal\"\n//           placeholder=\"Date Completed\"\n//           type=\"text\"\n//           fullWidth\n//         />\n//         <TextField\n//           id=\"name\"\n//           value={workshopRegNo}\n//           onChange={(e) => setWorkshopRegNo(e.target.value)}\n//           margin=\"normal\"\n//           placeholder=\"Workshop RegNo\"\n//           type=\"text\"\n//           fullWidth\n//         />\n//         <TextField\n//           id=\"name\"\n//           value={typeOfWorkDone}\n//           onChange={(e) => setTypeOfWorkDone(e.target.value)}\n//           margin=\"normal\"\n//           placeholder=\"Type Of Work Done\"\n//           type=\"text\"\n//           fullWidth\n//         />\n//         <TextField\n//           id=\"name\"\n//           value={appointedMechanic}\n//           onChange={(e) => setAppointedMechanic(e.target.value)}\n//           margin=\"normal\"\n//           placeholder=\"Appointed Mechanic\"\n//           type=\"text\"\n//           fullWidth\n//         />\n//         <TextField\n//           id=\"name\"\n//           value={currentMileage}\n//           onChange={(e) => setCurrentMileage(e.target.value)}\n//           margin=\"normal\"\n//           placeholder=\"Current Mileage\"\n//           type=\"text\"\n//           fullWidth\n//         />\n//         <TextField\n//           id=\"name\"\n//           value={workDone}\n//           onChange={(e) => setWorkDone(e.target.value)}\n//           margin=\"normal\"\n//           placeholder=\"Work Done\"\n//           type=\"text\"\n//           fullWidth\n//         />\n//         <TextField\n//           id=\"name\"\n//           value={totalCharges}\n//           onChange={(e) => setTotalCharges(e.target.value)}\n//           margin=\"normal\"\n//           placeholder=\"Total Charges\"\n//           type=\"text\"\n//           fullWidth\n//         />\n//         <Button onClick={() => submit()}>Submit</Button>\n//       </Grid>\n//     </Grid>\n//   );\n// };\n\nexport default WorkshopSetSR;\n",{"ruleId":"313","replacedBy":"314"},{"ruleId":"315","replacedBy":"316"},{"ruleId":"317","severity":1,"message":"318","line":44,"column":66,"nodeType":"319","messageId":"320","endLine":44,"endColumn":68},{"ruleId":"321","severity":1,"message":"322","line":47,"column":6,"nodeType":"323","endLine":47,"endColumn":46,"suggestions":"324"},{"ruleId":"317","severity":1,"message":"325","line":77,"column":50,"nodeType":"319","messageId":"320","endLine":77,"endColumn":52},{"ruleId":"317","severity":1,"message":"325","line":100,"column":50,"nodeType":"319","messageId":"320","endLine":100,"endColumn":52},{"ruleId":"326","severity":1,"message":"327","line":23,"column":8,"nodeType":"328","messageId":"329","endLine":23,"endColumn":18},{"ruleId":"326","severity":1,"message":"330","line":25,"column":8,"nodeType":"328","messageId":"329","endLine":25,"endColumn":14},{"ruleId":"331","severity":1,"message":"332","line":16,"column":31,"nodeType":"333","messageId":"334","endLine":16,"endColumn":65},{"ruleId":"326","severity":1,"message":"335","line":8,"column":16,"nodeType":"328","messageId":"329","endLine":8,"endColumn":25},{"ruleId":"326","severity":1,"message":"336","line":9,"column":21,"nodeType":"328","messageId":"329","endLine":9,"endColumn":32},{"ruleId":"326","severity":1,"message":"337","line":10,"column":19,"nodeType":"328","messageId":"329","endLine":10,"endColumn":30},{"ruleId":"326","severity":1,"message":"338","line":11,"column":18,"nodeType":"328","messageId":"329","endLine":11,"endColumn":25},{"ruleId":"326","severity":1,"message":"339","line":23,"column":8,"nodeType":"328","messageId":"329","endLine":23,"endColumn":11},{"ruleId":"340","severity":1,"message":"341","line":136,"column":31,"nodeType":"342","messageId":"343","endLine":136,"endColumn":33},{"ruleId":"326","severity":1,"message":"344","line":3,"column":3,"nodeType":"328","messageId":"329","endLine":3,"endColumn":7},{"ruleId":"326","severity":1,"message":"345","line":4,"column":3,"nodeType":"328","messageId":"329","endLine":4,"endColumn":17},{"ruleId":"326","severity":1,"message":"346","line":5,"column":3,"nodeType":"328","messageId":"329","endLine":5,"endColumn":9},{"ruleId":"326","severity":1,"message":"347","line":6,"column":3,"nodeType":"328","messageId":"329","endLine":6,"endColumn":16},{"ruleId":"326","severity":1,"message":"348","line":7,"column":3,"nodeType":"328","messageId":"329","endLine":7,"endColumn":11},{"ruleId":"321","severity":1,"message":"349","line":62,"column":6,"nodeType":"323","endLine":62,"endColumn":8,"suggestions":"350"},{"ruleId":"326","severity":1,"message":"351","line":4,"column":3,"nodeType":"328","messageId":"329","endLine":4,"endColumn":19},{"ruleId":"326","severity":1,"message":"327","line":5,"column":3,"nodeType":"328","messageId":"329","endLine":5,"endColumn":13},{"ruleId":"326","severity":1,"message":"352","line":7,"column":3,"nodeType":"328","messageId":"329","endLine":7,"endColumn":8},{"ruleId":"326","severity":1,"message":"353","line":8,"column":3,"nodeType":"328","messageId":"329","endLine":8,"endColumn":7},{"ruleId":"326","severity":1,"message":"354","line":9,"column":3,"nodeType":"328","messageId":"329","endLine":9,"endColumn":6},{"ruleId":"326","severity":1,"message":"355","line":11,"column":3,"nodeType":"328","messageId":"329","endLine":11,"endColumn":7},{"ruleId":"326","severity":1,"message":"356","line":19,"column":21,"nodeType":"328","messageId":"329","endLine":19,"endColumn":36},{"ruleId":"340","severity":1,"message":"357","line":135,"column":25,"nodeType":"342","messageId":"358","endLine":135,"endColumn":27},{"ruleId":"340","severity":1,"message":"357","line":138,"column":39,"nodeType":"342","messageId":"358","endLine":138,"endColumn":41},{"ruleId":"340","severity":1,"message":"357","line":199,"column":25,"nodeType":"342","messageId":"358","endLine":199,"endColumn":27},{"ruleId":"326","severity":1,"message":"359","line":3,"column":3,"nodeType":"328","messageId":"329","endLine":3,"endColumn":7},{"ruleId":"326","severity":1,"message":"360","line":4,"column":3,"nodeType":"328","messageId":"329","endLine":4,"endColumn":14},{"ruleId":"326","severity":1,"message":"361","line":6,"column":3,"nodeType":"328","messageId":"329","endLine":6,"endColumn":8},{"ruleId":"326","severity":1,"message":"362","line":7,"column":3,"nodeType":"328","messageId":"329","endLine":7,"endColumn":12},{"ruleId":"326","severity":1,"message":"363","line":8,"column":3,"nodeType":"328","messageId":"329","endLine":8,"endColumn":11},{"ruleId":"326","severity":1,"message":"364","line":9,"column":3,"nodeType":"328","messageId":"329","endLine":9,"endColumn":17},{"ruleId":"326","severity":1,"message":"365","line":10,"column":3,"nodeType":"328","messageId":"329","endLine":10,"endColumn":12},{"ruleId":"326","severity":1,"message":"366","line":11,"column":3,"nodeType":"328","messageId":"329","endLine":11,"endColumn":8},{"ruleId":"326","severity":1,"message":"367","line":12,"column":3,"nodeType":"328","messageId":"329","endLine":12,"endColumn":12},{"ruleId":"340","severity":1,"message":"357","line":26,"column":20,"nodeType":"342","messageId":"358","endLine":26,"endColumn":22},{"ruleId":"326","severity":1,"message":"368","line":154,"column":11,"nodeType":"328","messageId":"329","endLine":154,"endColumn":21},{"ruleId":"340","severity":1,"message":"357","line":356,"column":28,"nodeType":"342","messageId":"358","endLine":356,"endColumn":30},{"ruleId":"340","severity":1,"message":"357","line":458,"column":28,"nodeType":"342","messageId":"358","endLine":458,"endColumn":30},{"ruleId":"326","severity":1,"message":"351","line":4,"column":3,"nodeType":"328","messageId":"329","endLine":4,"endColumn":19},{"ruleId":"326","severity":1,"message":"327","line":5,"column":3,"nodeType":"328","messageId":"329","endLine":5,"endColumn":13},{"ruleId":"326","severity":1,"message":"369","line":6,"column":3,"nodeType":"328","messageId":"329","endLine":6,"endColumn":9},{"ruleId":"326","severity":1,"message":"353","line":7,"column":3,"nodeType":"328","messageId":"329","endLine":7,"endColumn":7},{"ruleId":"326","severity":1,"message":"354","line":8,"column":3,"nodeType":"328","messageId":"329","endLine":8,"endColumn":6},{"ruleId":"326","severity":1,"message":"370","line":9,"column":3,"nodeType":"328","messageId":"329","endLine":9,"endColumn":12},{"ruleId":"326","severity":1,"message":"355","line":10,"column":3,"nodeType":"328","messageId":"329","endLine":10,"endColumn":7},{"ruleId":"326","severity":1,"message":"371","line":5,"column":8,"nodeType":"328","messageId":"329","endLine":5,"endColumn":14},{"ruleId":"326","severity":1,"message":"372","line":7,"column":8,"nodeType":"328","messageId":"329","endLine":7,"endColumn":17},{"ruleId":"326","severity":1,"message":"373","line":11,"column":3,"nodeType":"328","messageId":"329","endLine":11,"endColumn":18},{"ruleId":"326","severity":1,"message":"374","line":12,"column":3,"nodeType":"328","messageId":"329","endLine":12,"endColumn":19},{"ruleId":"326","severity":1,"message":"375","line":13,"column":3,"nodeType":"328","messageId":"329","endLine":13,"endColumn":17},{"ruleId":"326","severity":1,"message":"376","line":27,"column":10,"nodeType":"328","messageId":"329","endLine":27,"endColumn":29},{"ruleId":"321","severity":1,"message":"377","line":56,"column":6,"nodeType":"323","endLine":56,"endColumn":8,"suggestions":"378"},{"ruleId":"340","severity":1,"message":"357","line":82,"column":27,"nodeType":"342","messageId":"358","endLine":82,"endColumn":29},{"ruleId":"326","severity":1,"message":"375","line":8,"column":10,"nodeType":"328","messageId":"329","endLine":8,"endColumn":24},{"ruleId":"326","severity":1,"message":"379","line":9,"column":8,"nodeType":"328","messageId":"329","endLine":9,"endColumn":17},{"ruleId":"326","severity":1,"message":"380","line":16,"column":9,"nodeType":"328","messageId":"329","endLine":16,"endColumn":14},{"ruleId":"326","severity":1,"message":"381","line":19,"column":10,"nodeType":"328","messageId":"329","endLine":19,"endColumn":18},{"ruleId":"326","severity":1,"message":"382","line":19,"column":20,"nodeType":"328","messageId":"329","endLine":19,"endColumn":31},{"ruleId":"326","severity":1,"message":"383","line":21,"column":10,"nodeType":"328","messageId":"329","endLine":21,"endColumn":22},{"ruleId":"326","severity":1,"message":"384","line":22,"column":10,"nodeType":"328","messageId":"329","endLine":22,"endColumn":23},{"ruleId":"326","severity":1,"message":"385","line":22,"column":25,"nodeType":"328","messageId":"329","endLine":22,"endColumn":41},{"ruleId":"326","severity":1,"message":"386","line":23,"column":10,"nodeType":"328","messageId":"329","endLine":23,"endColumn":23},{"ruleId":"326","severity":1,"message":"387","line":23,"column":25,"nodeType":"328","messageId":"329","endLine":23,"endColumn":41},"no-native-reassign",["388"],"no-negated-in-lhs",["389"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'accountsLength' and 'getRole'. Either include them or remove the dependency array.","ArrayExpression",["390"],"Expected '!==' and instead saw '!='.","no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'Tables' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'TableIcon' is defined but never used.","'SupportIcon' is defined but never used.","'LibraryIcon' is defined but never used.","'FAQIcon' is defined but never used.","'Dot' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Grid' is defined but never used.","'LinearProgress' is defined but never used.","'Select' is defined but never used.","'OutlinedInput' is defined but never used.","'MenuItem' is defined but never used.","React Hook useEffect has missing dependencies: 'retrieveAccidents', 'retrieveOwner', 'retrieveServicing', and 'retrieveVehicles'. Either include them or remove the dependency array.",["391"],"'CircularProgress' is defined but never used.","'Modal' is defined but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","'Fade' is defined but never used.","'useDrizzleState' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'Card' is defined but never used.","'CardContent' is defined but never used.","'Table' is defined but never used.","'TableCell' is defined but never used.","'TableRow' is defined but never used.","'TableContainer' is defined but never used.","'TableBody' is defined but never used.","'Paper' is defined but never used.","'TableHead' is defined but never used.","'hexConvert' is assigned a value but never used.","'Button' is defined but never used.","'TextField' is defined but never used.","'Widget' is defined but never used.","'TableCard' is defined but never used.","'accidentColumns' is defined but never used.","'servicingColumns' is defined but never used.","'vehicleColumns' is defined but never used.","'AllVehIdsServicedBy' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'retrieveAllVehIdsServicedBy' and 'retrieveWorkshop'. Either include them or remove the dependency array.",["392"],"'ModalForm' is defined but never used.","'state' is assigned a value but never used.","'userInfo' is assigned a value but never used.","'setUserInfo' is assigned a value but never used.","'userVehicles' is assigned a value but never used.","'userAccidents' is assigned a value but never used.","'setUserAccidents' is assigned a value but never used.","'userServicing' is assigned a value but never used.","'setUserServicing' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"393","fix":"394"},{"desc":"395","fix":"396"},{"desc":"397","fix":"398"},"Update the dependencies array to be: [accountsLength, drizzleState.drizzleStatus.initialized, getRole]",{"range":"399","text":"400"},"Update the dependencies array to be: [retrieveAccidents, retrieveOwner, retrieveServicing, retrieveVehicles]",{"range":"401","text":"402"},"Update the dependencies array to be: [retrieveAllVehIdsServicedBy, retrieveWorkshop]",{"range":"403","text":"404"},[1342,1382],"[accountsLength, drizzleState.drizzleStatus.initialized, getRole]",[1815,1817],"[retrieveAccidents, retrieveOwner, retrieveServicing, retrieveVehicles]",[1767,1769],"[retrieveAllVehIdsServicedBy, retrieveWorkshop]"]